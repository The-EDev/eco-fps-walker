[gd_scene load_steps=14 format=2]


[sub_resource type="CapsuleShape" id=1]

radius = 0.6
height = 0.8

[sub_resource type="GDScript" id=2]

script/source = "extends KinematicBody

var _is_loaded = false
var velocity=Vector3()
var yaw = 0
var pitch = 0
var is_moving=false
var on_floor=false
var jump_timeout=0
var step_timeout=0
var fly_mode=false
var alive=true
var is_jumping=false
var is_running=false
var is_crouching=false
var body_position=\"stand\"
var jump_strength=9
var node_camera=null
var node_leg=null
var node_yaw=null
var node_body=null
var node_head_check=null
var node_action_ray=null
var node_ray = null
var node_step_ray=null
var aim_offset=Vector3(0,1.5,0)
const GRAVITY_FACTOR=3
export(bool) var active=true setget _set_active
export(float) var walk_speed=15
export(float) var run_factor=3
export(float) var crouch_factor=0.2
export(float) var leg_length=0.4 setget _set_leg_length
export(float) var body_radius=0.6 setget _set_body_radius
export(float) var body_height=0.8 setget _set_body_height
export(float) var camera_height=1.7 setget _set_camera_height
export(float) var action_range=2 setget _set_action_range
export(String) var action_forward=\"ui_up\"
export(String) var action_backward=\"ui_down\"
export(String) var action_left=\"ui_left\"
export(String) var action_right=\"ui_right\"
export(String) var action_action1=\"ui_action1\"
export(String) var action_jump=\"ui_jump\"
export(String) var action_use=\"ui_select\"
export(float) var ACCEL= 2
export(float) var DEACCEL= 4 
export(float) var FLY_SPEED=100
export(float) var FLY_ACCEL=4
export(float) var GRAVITY=-9.8
export(float) var MAX_JUMP_TIMEOUT=0.2
export(float) var MAX_ATTACK_TIMEOUT=0.2
export(int) var MAX_SLOPE_ANGLE = 40
export(float) var STAIR_RAYCAST_HEIGHT=0.75
export(float) var STAIR_RAYCAST_DISTANCE=0.58
export(float) var STAIR_JUMP_SPEED=5
export(float) var STAIR_JUMP_TIMEOUT=0.1
export(float) var footstep_factor=0.004
export(float) var view_sensitivity = 0.3
func _ready():
	_build_structure()
	_is_loaded=true
	_update_params()
	node_action_ray.add_exception(self)
	set_fixed_process(true)
	set_process_input(true)

func _build_structure():
	node_camera=get_node(\"eco_yaw/camera\")
	node_leg=get_node(\"eco_body/leg\")
	node_yaw=get_node(\"eco_yaw\")
	node_body=get_node(\"eco_body\")
	node_head_check=get_node(\"head_check_area\")
	node_action_ray=get_node(\"eco_yaw/camera/actionRay\")
	node_ray=get_node(\"eco_ray\")
	node_step_ray=get_node(\"eco_stepRay\")

func _update_params():
	_set_active(active)
	_set_leg_length(leg_length)
	_set_body_radius(body_radius)
	_set_body_height(body_height)
	_set_camera_height(camera_height)
	_set_action_range(action_range)

func _embed_children():
	var children=self.get_children()
	for child in children:
		if child.get_name().left(4)==\"eco_\":
			continue
		else:
			remove_child(child)
			node_camera.add_child(child)

func _input(ie):
	if not active:
		return
	
	if ie.type == InputEvent.MOUSE_MOTION:
		yaw = fmod(yaw - ie.relative_x * view_sensitivity, 360)
		pitch = max(min(pitch - ie.relative_y * view_sensitivity, 90), -90)
		node_yaw.set_rotation(Vector3(0, deg2rad(yaw), 0))
		node_camera.set_rotation(Vector3(deg2rad(pitch), 0, 0))
	
	if ie.type == InputEvent.KEY:
		if Input.is_action_pressed(action_use):
			var ray=node_action_ray
			if ray.is_colliding():
				var obj=ray.get_collider()
				if obj.has_method(\"use\"):
					obj.use(self)
		if Input.is_action_pressed(\"ui_toggle_crouch\"):
			if body_position==\"crouch\":
				stand()
				body_position=\"stand\"
			else:
				crouch()
				body_position=\"crouch\"

func _fixed_process(delta):
	if fly_mode:
		_fly(delta)
	else:
		_walk(delta)

func _enter_tree():
	if active:
		Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _exit_tree():
	Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)

func _fly(delta):
	var aim = node_camera.get_global_transform().basis
	var direction = Vector3()
	if Input.is_action_pressed(action_forward):
		direction -= aim[2]
	if Input.is_action_pressed(action_backward):
		direction += aim[2]
	if Input.is_action_pressed(action_left):
		direction -= aim[0]
	if Input.is_action_pressed(action_right):
		direction += aim[0]
	direction = direction.normalized()
	var target=direction*FLY_SPEED
	velocity=Vector3().linear_interpolate(target,FLY_ACCEL*delta)
	var motion=velocity*delta
	motion=move(motion)
	var original_vel=velocity
	var attempts=4
	while(attempts and is_colliding()):
		var n=get_collision_normal()
		motion=n.slide(motion)
		velocity=n.slide(velocity)
		if(original_vel.dot(velocity)>0):
			motion=move(motion)
			if (motion.length()<0.001):
				break
		attempts-=1

func _walk(delta):
	if jump_timeout>0:
		jump_timeout-=delta
	var aim = node_camera.get_global_transform().basis
	var direction = Vector3()
	if Input.is_action_pressed(action_forward):
		direction -= aim[2]
	if Input.is_action_pressed(action_backward):
		direction += aim[2]
	if Input.is_action_pressed(action_left):
		direction -= aim[0]
	if Input.is_action_pressed(action_right):
		direction += aim[0]
	is_running=Input.is_action_pressed(\"ui_run\")
	var crouch_mode=body_position==\"crouch\"
	var is_crouch_pressed=Input.is_action_pressed(\"ui_crouch\")
	if is_crouching and (crouch_mode==is_crouch_pressed):
		stand()
	elif not is_crouching and (crouch_mode!=is_crouch_pressed):
		crouch()
	is_moving=(direction.length()>0)
	direction.y=0
	direction = direction.normalized()
	var is_ray_colliding=node_ray.is_colliding()
	if !on_floor and jump_timeout<=0 and is_ray_colliding:
		set_translation(node_ray.get_collision_point())
		on_floor=true
	elif on_floor and not is_ray_colliding:
		on_floor=false
	if on_floor:
		if step_timeout<=0:
			step_timeout=1
		else:
			step_timeout-=velocity.length()*footstep_factor
		var n=node_ray.get_collision_normal()
		velocity=velocity-velocity.dot(n)*n
		if is_moving and node_step_ray.is_colliding():
			var step_normal=node_step_ray.get_collision_normal()
			if (rad2deg(acos(step_normal.dot(Vector3(0,1,0))))< MAX_SLOPE_ANGLE):
				velocity.y=STAIR_JUMP_SPEED
				jump_timeout=STAIR_JUMP_TIMEOUT
		if (rad2deg(acos(n.dot(Vector3(0,1,0))))> MAX_SLOPE_ANGLE):
			velocity.y+=delta*GRAVITY*GRAVITY_FACTOR
	else:
		velocity.y+=delta*GRAVITY*GRAVITY_FACTOR
	var target=direction*get_walk_speed(is_crouching,is_running)
	var accel=DEACCEL
	if is_moving:
		accel=ACCEL
	var hvel=velocity
	hvel.y=0
	hvel=hvel.linear_interpolate(target,accel*delta)
	velocity.x=hvel.x
	velocity.z=hvel.z
	var motion=velocity*delta
	motion=move(motion)
	var original_vel=velocity
	if(motion.length()>0 and is_colliding()):
		var n=get_collision_normal()
		motion=n.slide(motion)
		velocity=n.slide(velocity)
		if(original_vel.dot(velocity)>0):
			motion=move(motion)
	if on_floor:
		var floor_velocity=_get_floor_velocity(node_ray,delta)
		if floor_velocity.length()!=0:
			move(floor_velocity*delta)
		if Input.is_action_pressed(action_jump) and body_position==\"stand\":
			velocity.y=jump_strength
			jump_timeout=MAX_JUMP_TIMEOUT
			on_floor=false
	if is_moving:
		var sensor_position=Vector3(direction.z,0,-direction.x)*STAIR_RAYCAST_DISTANCE
		sensor_position.y=STAIR_RAYCAST_HEIGHT
		node_step_ray.set_translation(sensor_position)

func _get_floor_velocity(ray,delta):
	var floor_velocity=Vector3()
	var object = ray.get_collider()
	if object extends RigidBody or object extends StaticBody:
		var floor_angular_vel = Vector3()
		if object extends RigidBody:
			floor_velocity = object.get_linear_velocity()
			floor_angular_vel = object.get_angular_velocity()
		elif object extends StaticBody:
			floor_velocity = object.get_constant_linear_velocity()
			floor_angular_vel = object.get_constant_angular_velocity()
		if(floor_angular_vel.length()>0):
			var transform = Matrix3(Vector3(1, 0, 0), floor_angular_vel.x)
			transform = transform.rotated(Vector3(0, 1, 0), floor_angular_vel.y)
			transform = transform.rotated(Vector3(0, 0, 1), floor_angular_vel.z)
			var point = ray.get_collision_point() - object.get_translation()
			floor_velocity += transform.xform_inv(point) - point
			yaw = fmod(yaw + rad2deg(floor_angular_vel.y) * delta, 360)
			node_yaw.set_rotation(Vector3(0, deg2rad(yaw), 0))
	return floor_velocity

func _on_ladders_body_enter( body ):
	if body==self:
		fly_mode=true

func _on_ladders_body_exit( body ):
	if body==self:
		fly_mode=false

func crouch():
	node_body.get_shape().set_height(0.1)
	node_body.get_shape().set_radius(0.1)
	node_body.set_translation(Vector3(0,0.55,0))
	node_camera.set_translation(Vector3(0,0.4,0))
	node_leg.set_translation(Vector3(0,0,0.1))
	is_crouching=true
	node_head_check.set_enable_monitoring(true)
	
func stand():
	if node_head_check.get_overlapping_bodies().size()>0:
		return
	node_body.get_shape().set_height(0.8)
	node_body.get_shape().set_radius(0.6)
	node_body.set_translation(Vector3(0,1.4,0))
	node_camera.set_translation(Vector3(0,1.7,0))
	node_leg.set_translation(Vector3(0,0,1))
	is_crouching=false
	node_head_check.set_enable_monitoring(false)

func get_walk_speed(is_crouching,is_running):
	var speed=walk_speed
	if is_crouching:
		speed*=crouch_factor
	if is_running:
		speed*=run_factor
	return speed

func _set_leg_length(value):
	leg_length=value
	if _is_loaded:
		node_leg.get_shape().set_length(value)
		node_ray.set_cast_to(Vector3(0,-value*2,0))

func _set_body_radius(value):
	body_radius=value
	if _is_loaded:
		node_body.get_shape().set_radius(value)

func _set_body_height(value):
	body_height=value
	if _is_loaded:
		node_body.get_shape().set_height(value)

func _set_camera_height(value):
	camera_height=value
	if _is_loaded:
		node_camera.set_translation(Vector3(0,value,0))

func _set_action_range(value):
	action_range=value
	if _is_loaded:
		node_action_ray.set_cast_to(Vector3(0,0,-value))

func _set_active(value):
	if value!=active:
		active=value
		if active:
			Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)
		else:
			Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)

func get_global_origin():
	return node_action_ray.get_global_transform().origin"

[sub_resource type="RayShape" id=3]

length = 0.4

[sub_resource type="SphereShape" id=4]

radius = 0.1874

[node name="actor" type="KinematicBody"]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
input_ray_pickable = true
input_capture_on_drag = false
shape_count = 1
shapes/0/shape = SubResource( 1 )
shapes/0/transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 1.4, 0 )
shapes/0/trigger = false
collision_layer = 1
collision_mask = 5
collide_with/static = true
collide_with/kinematic = true
collide_with/rigid = true
collide_with/character = true
collision/margin = 0.001
script = SubResource( 2 )
__meta__ = {
"__editor_plugin_screen__": "3D"
}
active = true
walk_speed = 15
run_factor = 3
crouch_factor = 0.2
leg_length = 0.4
body_radius = 0.6
body_height = 0.8
camera_height = 1.7
action_range = 2
action_forward = "ui_up"
action_backward = "ui_down"
action_left = "ui_left"
action_right = "ui_right"
action_action1 = "ui_action1"
action_jump = "ui_jump"
action_use = "ui_select"
ACCEL = 2
DEACCEL = 4
FLY_SPEED = 100
FLY_ACCEL = 4
GRAVITY = -9.8
MAX_JUMP_TIMEOUT = 0.2
MAX_ATTACK_TIMEOUT = 0.2
MAX_SLOPE_ANGLE = 40
STAIR_RAYCAST_HEIGHT = 0.75
STAIR_RAYCAST_DISTANCE = 0.58
STAIR_JUMP_SPEED = 5
STAIR_JUMP_TIMEOUT = 0.1
footstep_factor = 0.004
view_sensitivity = 0.3

[node name="eco_body" type="CollisionShape" parent="."]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
transform = Transform( 1, 0, 0, 0, -4.37114e-08, -1, 0, 1, -4.37114e-08, 0, 1.4, 0 )
shape = SubResource( 1 )
trigger = false
_update_shape_index = 0

[node name="leg" type="CollisionShape" parent="eco_body"]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1 )
shape = SubResource( 3 )
trigger = false
_update_shape_index = -1

[node name="eco_yaw" type="Spatial" parent="."]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )

[node name="camera" type="Camera" parent="eco_yaw"]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.7, 0 )
projection = 0
fov = 60.0
near = 0.1
far = 1000.0
keep_aspect = 1
current = true
visible_layers = 1048575
environment = null
h_offset = 0.0
v_offset = 0.0

[node name="actionRay" type="RayCast" parent="eco_yaw/camera"]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
enabled = true
cast_to = Vector3( 0, 0, -2 )
layer_mask = 1
type_mask = 15

[node name="eco_ray" type="RayCast" parent="."]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.4, 0 )
enabled = true
cast_to = Vector3( 0, -0.8, 0 )
layer_mask = 1
type_mask = 15

[node name="eco_stepRay" type="RayCast" parent="."]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.75, -0.58 )
enabled = true
cast_to = Vector3( 0, -0.5, 0 )
layer_mask = 1
type_mask = 15

[node name="head_check_area" type="Area" parent="."]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2.21862, 0 )
input_ray_pickable = false
input_capture_on_drag = false
shape_count = 1
shapes/0/shape = SubResource( 4 )
shapes/0/transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
shapes/0/trigger = false
space_override = 0
gravity_point = false
gravity_distance_scale = 0.0
gravity_vec = Vector3( 0, -1, 0 )
gravity = 9.8
linear_damp = 0.1
angular_damp = 1.0
priority = 0.0
monitoring = false
monitorable = false
collision_layer = 1
collision_mask = 1

[node name="CollisionShape" type="CollisionShape" parent="head_check_area"]

_import_transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )
shape = SubResource( 4 )
trigger = false
_update_shape_index = 0
